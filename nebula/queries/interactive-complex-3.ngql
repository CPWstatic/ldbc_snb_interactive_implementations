MATCH (countryX:Place)
  WHERE id(countryX) == $countryXId
MATCH (countryY:Place)
  WHERE id(countryY) == $countryYId
MATCH (person:Person)
  WHERE id(person) == $personId
  WITH person, countryX, countryY
  LIMIT 1
MATCH (city:Place)-[:IS_PART_OF]->(country:Place)
  WHERE id(country) IN ["place-0", "place-95"]
  WITH person, countryX, countryY, collect(city) AS cities
MATCH (person)-[:KNOWS*1..2]-(friend)-[:IS_LOCATED_IN]->(city)
  WHERE person<>friend AND NOT city IN cities
  WITH DISTINCT friend, countryX, countryY
MATCH (friend)<-[:HAS_CREATOR]-(message),
  (message)-[:IS_LOCATED_IN]->(country)
  WHERE $endDate > message.Message.creationDate >= $startDate AND
  country IN [countryX, countryY]
  WITH friend,
  CASE WHEN country==countryX THEN 1 ELSE 0 END AS messageX,
  CASE WHEN country==countryY THEN 1 ELSE 0 END AS messageY
  WITH friend, sum(messageX) AS xCount, sum(messageY) AS yCount
  WHERE xCount>0 AND yCount>0
  RETURN friend.Person.id AS friendId,
    friend.Person.firstName AS friendFirstName,
    friend.Person.lastName AS friendLastName,
    xCount,
    yCount,
    xCount + yCount AS xyCount
    ORDER BY xyCount DESC, friendId ASC
    LIMIT 20